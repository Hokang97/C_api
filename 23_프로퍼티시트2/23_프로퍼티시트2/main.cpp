#include <Windows.h>
#include <CommCtrl.h>
#pragma comment (lib, "Comctl32.lib")
#include "resource.h"

HWND g_hTab;
HWND g_hStatic;
HIMAGELIST g_IL;
// 함수 호출 방법
// __stdcall : 매개변수의 개수가 고정된 함수    / 크기 작다  / callee (피호출자) stack 정리
// __cdecl   : 매개변수의 개수가 가변적인 함수  / 크기 크다  / caller (호출자)   stack 정리

LRESULT CALLBACK WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
HINSTANCE g_hInst;
int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR IpszCmdParam, int nCmdShow)
{
	HWND hWnd;
	MSG Msg;
	WNDCLASS WndClass;
	g_hInst = hInstance;
	// 1. 윈도우 클래스 설정/초기화
	WndClass.style = CS_HREDRAW | CS_VREDRAW;
	WndClass.cbClsExtra = 0;	// 특수한 목적으로 사용될 예약 영역
	WndClass.cbWndExtra = 0;
	WndClass.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	WndClass.hCursor = LoadCursor(NULL, IDC_ARROW);
	WndClass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	WndClass.hInstance = hInstance;		// 윈도우 클래스를 등록하는 프로그램의 번호
	WndClass.lpfnWndProc = WndProc;		// 프로시저 설정
	WndClass.lpszClassName = TEXT("WndClass");
	WndClass.lpszMenuName = NULL;

	// 2. 윈도우 클래스 등록
	RegisterClass(&WndClass);

	// 3. 윈도우 창 생성
	hWnd = CreateWindow(WndClass.lpszClassName, TEXT("윈도우타이틀"),
		WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 800, 640, NULL, NULL, hInstance, NULL);


	// 4. 윈도우 창 활성화/표시
	ShowWindow(hWnd, SW_SHOW);

	// 5. 메세지 루프/처리
	// GetMessage()
	// PeekMessage()


	while (GetMessage(&Msg, NULL, 0, 0))
	{
		TranslateMessage(&Msg);		// 키보드 입력 메세지를 프로그램에서 사용할 수 있도록 가공
		DispatchMessage(&Msg);		// 메세지 큐에서 꺼낸 메세지를 프로시저에 전달
	}

	return (int)Msg.wParam;





}

// 콜백함수 매개변수
// hwnd - 메세지를 받을 윈도우 핸들러
// msg	- 어떤 종류의 메세지인지 확일할 수 있는 값
// wParam	- 메세지의 부가 정보 (메세지에 따라 다름)
// lParam	- 메세지의 부가 정보 (메세지에 따라 다름)
LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	TCITEM tie;
	const TCHAR* arNum[3] = { TEXT("첫번째 페이지"), TEXT("두번째 페이지"), TEXT("세번째 페이지") };

	switch (msg)
	{
	case WM_CREATE:
		InitCommonControls();


		g_hTab = CreateWindow(WC_TABCONTROL, TEXT(""), WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS | TCS_FIXEDWIDTH | TCS_FORCEICONLEFT,
			0, 0, 0, 0, hwnd, (HMENU)0, g_hInst, NULL);
		g_hStatic = CreateWindow(TEXT("static"), arNum[0], WS_CHILD | WS_VISIBLE,
			0, 0, 0, 0, hwnd, (HMENU)1, g_hInst, NULL);

		TabCtrl_SetItemSize(g_hTab, 220, 22);

		g_IL = ImageList_LoadImage(g_hInst, MAKEINTRESOURCE(IDB_BITMAP1), 16, 1, RGB(255, 255, 255), IMAGE_BITMAP, 0);

		TabCtrl_SetImageList(g_hTab, g_IL);

		tie.mask = TCIF_TEXT | TCIF_IMAGE;

		tie.pszText = (LPWSTR)TEXT("첫번째 탭");
		tie.iImage = 0;
		TabCtrl_InsertItem(g_hTab, 0, &tie);

		tie.pszText = (LPWSTR)TEXT("두번째 탭");
		tie.iImage = 1;
		TabCtrl_InsertItem(g_hTab, 1, &tie);

		tie.pszText = (LPWSTR)TEXT("세번째 탭");
		tie.iImage = 2;
		TabCtrl_InsertItem(g_hTab, 2, &tie);
		return 0;

	case WM_NOTIFY:
		switch ((((LPNMHDR)lParam)->code))
		{
		case TCN_SELCHANGE:
			SetWindowText(g_hStatic, arNum[TabCtrl_GetCurSel(g_hTab)]);
			break;
		}
		return 0;

	case WM_SIZE:
		MoveWindow(g_hTab, 0, 0, LOWORD(lParam), HIWORD(lParam), TRUE);
		MoveWindow(g_hStatic, LOWORD(lParam) / 2 - 250, HIWORD(lParam) / 2, 500, 25, TRUE);
		return 0;

	case WM_DESTROY:
		// WM_QUIT 메세지를 발송
		ImageList_Destroy(g_IL);
		PostQuitMessage(0);
		return 0;
	}

	// 그 외의 메세지는 윈도우에서 알아서 처리하도록 설정
	return DefWindowProc(hwnd, msg, wParam, lParam);

}






